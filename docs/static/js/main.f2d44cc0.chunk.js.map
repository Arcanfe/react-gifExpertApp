{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/GetGifts.js","components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","console","log","trim","length","cats","preventDefault","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifts","image","key","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"6MAmCeA,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGDC,mBAAS,IAHR,mBAG9BC,EAH8B,KAGlBC,EAHkB,KAqBrC,OACI,0BAAMC,SAbW,SAACC,GAClBC,QAAQC,IAAI,gBAETL,EAAWM,OAAOC,OAAS,IAC1BT,GAAc,SAAAU,GAAI,OAAKR,GAAL,mBAAoBQ,OACtCP,EAAc,KAIlBE,EAAEM,mBAKE,2BAAOC,KAAK,OAAOC,MAAOX,EAAYY,SAlBpB,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,YCKhBG,EAZK,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAI7B,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCTHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,0FAC4EO,UAAUF,GADtF,sBAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MAEXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVvB,kBAeZY,GAfY,4CAAH,sDC6CLK,EAxCC,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECFH,SAACA,GAAc,IAAD,EACbvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAkBvC,OAZAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAC,GAEEH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAI1B,IAEIC,EDEwBK,CAAcnB,GAAjCU,EAlBgB,EAkBrBJ,KAAaO,EAlBQ,EAkBRA,QAGpB,OAFA/B,QAAQC,IAAI8B,GAGR,oCACI,wBAAIjB,UAAU,qCAAqCI,GAClDa,GAAW,uBAAGjB,UAAU,oCAAb,eACZ,yBAAKA,UAAU,aAIHc,EAAOF,KAAI,SAACY,GAEZ,OAAO,kBAAC,EAAD,iBAAiBA,EAAjB,CAAwBC,IAAKD,EAAM3B,YEDnD6B,EA/BM,WAAO,IAAD,EAEa7C,mBAAS,CAAC,cAFvB,mBAEhB8C,EAFgB,KAEJ/C,EAFI,KAWvB,OACI,oCACI,4CAEA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAIQ+C,EAAWf,KAAI,SAACR,EAAUwB,GAAX,OACX,kBAAC,EAAD,CAASxB,SAAUA,EAAUqB,IAAKrB,UCtB1DyB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.f2d44cc0.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    // Nunca dejar useState() sin valor (undefined), poner un valor inicial\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        console.log('Submit hecho');\r\n\r\n        if(inputValue.trim().length > 2 ){\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n       \r\n        // Previene por defecto que la pagina (por el uso del formulario) se refresque al hacer enter\r\n        e.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type='text' value={inputValue} onChange={handleInputChange}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n\r\n    //console.log(url);\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=feRPc7YCV3JQ8IanNH9eeH0AhwzVtpR0&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            // Se usa el signo de interrogacion en caso que no exista la ruta o valor en el path indicado\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    //console.log(gifs);\r\n    return gifs;\r\n};","import React, {useState, useEffect} from 'react'\r\nimport GifGridItem from './GifGridItem';\r\n//import {getGifs} from '../helpers/GetGifts';\r\nimport { useFetchGifts } from '../hooks/useFetchGifts';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    //const [images, setImages] = useState([]);\r\n\r\n    // UseEffect permite ejecutar el codigo de manera condicional\r\n    // Segundo condicional es una lista de dependencias, al poner el arreglo vacio [], se indica que no tiene dependencias. Se ejecuta una vez\r\n    //useEffect(() => {\r\n    //    getGifs(category)\r\n    //        .then(imgs => setImages(imgs));\r\n    //}, [category]);\r\n    // En caso que cambie la categoria, se coloca que habra dependencia de cambios de categoria\r\n\r\n    \r\n\r\n    // Al estar en este nivel, React vuelve a llamar el metodo para actualizar las referencias, para eso se usa useEffect\r\n    // Por orden, este metodo se pasa a otro archivo\r\n    // getGifs();\r\n\r\n    const {data:images, loading} = useFetchGifts(category); \r\n    console.log(loading);\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n            {loading && <p className='animate__animated animate__flash'>Cargando...</p> }\r\n            <div className='card-grid'>\r\n                \r\n\r\n                    {\r\n                        images.map((image) => {\r\n                            // Envia parametros a traves del spread junto al elemento. Realiza la misma accion que mandar hacer desestructuracion despues\r\n                        return <GifGridItem {...image} key={image.id}/>\r\n                        })\r\n                    }\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/GetGifts\";\r\n\r\nexport const useFetchGifts = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                //setTimeout(() => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                //}, 3000);\r\n            });\r\n    }, []);\r\n\r\n    return state;\r\n};","import React, {useState} from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    //const handleAdd = () => {\r\n    //    setCategories([...categories, 'Naruto']);\r\n    //\r\n    //    // Forma 2\r\n    //    //setCategories(cats => [...cats, 'Naruto']);\r\n    //}\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            \r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    // Por defecto, map, recibe 2 propiedades, 1 el elemento a iterar, 2 el id o la posicion del elemento dentro del arreglo\r\n                    // No se recomienda usar el id como key en la lista pues es un valor volatil, muy suceptible a cambios\r\n                    categories.map((category, i) => (\r\n                        <GifGrid category={category} key={category}/>\r\n                    )\r\n                )}\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}